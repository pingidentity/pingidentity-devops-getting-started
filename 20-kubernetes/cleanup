#!/bin/bash
cd $( dirname ${0} )
SCRIPT=$( basename ${0} )
SCRIPT_HOME=$( pwd )
cd ${SCRIPT_HOME}

source ./utils/k8sUtils.sh

set -o allexport
source "./env_vars"
set +o allexport

#
# Usage printing function
#
usage ()
{
cat <<END_USAGE
Usage: ${SCRIPT} {options}
    where {options} include:

    *-u, --usecase {use-case-name}
        The usecase to tear down and remove. Must be one in ./usecases (i.e. fullstack, directory)
    -n, --namespace
        The kubernets namespace to use.  Defaults to: ${USER}
    --all
        clean entire kubernetes environment related to namespace. Defaults to: (${USER})
    --help
        Display general usage information

    Example:
      Deploy the fullstack usecase

      ${SCRIPT} -u fullstack

    * Required option
END_USAGE
exit 99
}

usecase=""
namespace=""
#
# Parse the provided arguments, if any
#
while ! test -z "${1}" ; do
    case "${1}" in
        -n|--namespace)
            shift
            if test -z "${1}" ; then
                exit_usage "Error: You must provide a namespace string"
            fi
            namespace="${1}"
            ;;

        -u|--usecase)
            shift
            if test -z "${1}" ; then
                exit_usage "Error: You must provide a usecase"
            fi
            usecase="usecases/${1}"

            test ! -d "${usecase}" && exit_usage "Error: A valid usecase directory is required: ${usecase} not found. Usecase options:\n$(ls usecases)"
            ;;
        --all)
            delete_all=true
            ;;
        --force)
            force_all=true
            ;;
        --help)
            usage
            ;;
        *)
            exit_usage "Unrecognized option"
            ;;
    esac
    shift
done

#if no namespace provided, nor found.. create one!
if test -z "${namespace}" ; then
    if test "$(kubectl config view | grep -q namespace:)" ; then
    echo "no namespace found, creating..."
    create_namespace "${USER}"
    else
        namespace=$(kubectl config view | sed -n -e 's/.*namespace\://p' | cut -c 2-)
        echo "using namespace:${namespace}"
    fi   
fi

echo_environment

#show what we are deleting
if test "${delete_all}" = "true"; then
    echo_header "Removing everything (except persistent volumes) related to namespace:${namespace}"
    echo "NOTE: Persistent volumes are not deleted as they are shared amongst namespaces."    
    echo "To delete persistent volumes run \`kubectl -n _namespace_ delete persistentvolumes --grace-period=0 --force --all\` "
    kubectl delete pods,configmaps,secrets,jobs,statefulsets,deployments,persistentvolumeclaims,services \
        -n "${namespace}" \
        --grace-period=0 --force --all
    exit 0
else 
    echo_header "Tearing down 
        namespace=${namespace}
            label=usecase=${usecase}"
fi

for yamlFile in ${usecase}/*.yaml ; do
    echo "--- ${yamlFile}"

    envsubst < "${yamlFile}" > "${yamlFile}.tmp"
    echo "deleting ${yamlFile}"

    if test "${force_all}" = "true" ; then
        kubectlResult=$( kubectl delete -f "${yamlFile}.tmp --force" )
    else 
        kubectlResult=$( kubectl delete -f "${yamlFile}.tmp" )
    fi

    echo_indent "${kubectlResult}"

    rm "${yamlFile}.tmp"
done
