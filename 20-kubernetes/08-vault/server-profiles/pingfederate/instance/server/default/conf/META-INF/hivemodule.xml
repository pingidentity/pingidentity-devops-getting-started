<module id="com.pingfederatehive" version="1.0.1">

    <!-- Runtime state managment services -->
    <service-point id="ArtifactStore" interface="org.sourceid.saml20.service.ArtifactPersistenceService">
      <create-instance class="org.sourceid.saml20.service.impl.proxy.ArtifactPersistenceSvcProxy" model="primitive"/>
    </service-point>

    <service-point id="AssertionReplayPreventionService" interface="org.sourceid.saml20.service.AssertionReplayPreventionService">
      <create-instance class="org.sourceid.saml20.service.impl.proxy.AssertionReplayPreventionSvcProxy" model="primitive"/>
    </service-point>

    <service-point id="IdpSessionReqistry" interface="org.sourceid.saml20.service.IdpSessionRegistry">
      <create-instance class="org.sourceid.saml20.service.impl.proxy.IdpSessionRegistryProxy" model="primitive"/>
    </service-point>

    <service-point id="SpSessionReqistry" interface="org.sourceid.saml20.service.SpSessionRegistry">
      <create-instance class="org.sourceid.saml20.service.impl.proxy.SpSessionRegistryProxy" model="primitive"/>
    </service-point>

    <service-point id="InterRequestStateMgmt" interface="org.sourceid.saml20.service.InterRequestStateMgmt">
      <!--
        Supported classes are
            org.sourceid.saml20.service.impl.proxy.InterRequestStateMgmtProxy
            org.sourceid.saml20.service.impl.grouprpc.InterRequestStateMgmtGroupRpcImpl
            org.sourceid.saml20.service.impl.localmemory.InterReqStateMgmtMapImpl
      -->
      <create-instance class="org.sourceid.saml20.service.impl.proxy.InterRequestStateMgmtProxy" model="primitive"/>
    </service-point>

    <service-point id="SessionRevocationService" interface="org.sourceid.saml20.service.SessionRevocationService">
      <create-instance class="org.sourceid.saml20.service.impl.proxy.SessionRevocationServiceProxy" model="primitive"/>
    </service-point>

    <service-point id="NodeIndexRegistry" interface="org.sourceid.saml20.service.util.NodeIndexRegistry">
      <create-instance class="org.sourceid.saml20.service.impl.grouprpc.NodeIndexRegistryGroupRpcImpl" model="primitive"/>
    </service-point>

    <service-point id="AccountLockingService" interface="org.sourceid.saml20.service.impl.proxy.LockingServiceFactory">
      <!--
        Supported classes are
            org.sourceid.saml20.service.impl.proxy.AccountLockingServiceProxy
            org.sourceid.saml20.service.impl.grouprpc.AccountLockingServiceGroupRpcImpl (should only be used for engine nodes, not the admin console)
            org.sourceid.saml20.service.impl.localmemory.AccountLockingServiceInMemoryImpl
      -->
      <create-instance class="org.sourceid.saml20.service.impl.proxy.AccountLockingServiceProxy" model="primitive"/>
    </service-point>

    <!-- Crypto provider -->
    <service-point id="JCEManager" interface="com.pingidentity.crypto.JCEManager">
         <invoke-factory>
             <!--
                 Supported classes are
                     com.pingidentity.crypto.SunJCEManager         : Use this service-point if you are using default certificate storage
                     com.pingidentity.crypto.LunaJCEManager        : Use this service-point element if you are using the SafeNet Luna SA HSM to store certs
                     com.pingidentity.crypto.NcipherJCEManager     : Use this service-point element if you are using the Thales nShield Connect HSM to store certs
                     com.pingidentity.crypto.AWSCloudHSMJCEManager : Use this service-point element if you are using the AWS Cloud HSM (not classic) to store certs
             -->
             <construct class="com.pingidentity.crypto.SunJCEManager"/>
         </invoke-factory>
     </service-point>

    <service-point id="CertificateService" interface="com.pingidentity.crypto.CertificateService">
         <invoke-factory>
             <!--
                 Supported classes are
                     com.pingidentity.crypto.CertificateServiceImpl            : Use this service-point if you are using default certificate storage
                     com.pingidentity.crypto.LunaCertificateServiceImpl        : Use this service-point element if you are using the SafeNet Luna SA HSM to store certs
                     com.pingidentity.crypto.NcipherCertificateServiceImpl     : Use this service-point element if you are using the Thales nShield Connect HSM to store certs
                     com.pingidentity.crypto.AWSCloudHSMCertificateServiceImpl : Use this service-point element if you are using the AWS Cloud HSM (not classic) to store certs
             -->
             <construct class="com.pingidentity.crypto.CertificateServiceImpl"/>
         </invoke-factory>
     </service-point>

    <!-- Service/adapter for storage of account linking -->
    <service-point id="AccountLinkingService" interface="org.sourceid.saml20.service.AccountLinkingService">
        <!--
                Supported classes are
                        org.sourceid.saml20.service.impl.AccountLinkingServiceDBImpl    : Use this service-point for a database implementation
                        org.sourceid.saml20.service.impl.AccountLinkingServiceLDAPImpl  : Use this service-point for an LDAP implementation
        -->
        <create-instance class="org.sourceid.saml20.service.impl.AccountLinkingServiceDBImpl"/>
    </service-point>

    <!-- Service for storage of access grants -->
    <service-point id="AccessGrantManager" interface="com.pingidentity.sdk.accessgrant.AccessGrantManager">
        <!--
                Supported classes are
                        org.sourceid.oauth20.token.AccessGrantManagerJdbcImpl               : Use this service-point for a Jdbc implementation
                        org.sourceid.oauth20.token.AccessGrantManagerLDAPADImpl             : Use this service-point for a Microsoft Active Directory implementation
                        org.sourceid.oauth20.token.AccessGrantManagerLDAPOracleImpl         : Use this service-point for a Oracle Directory Server Enterprise Edition implementation
                        org.sourceid.oauth20.token.AccessGrantManagerLDAPPingDirectoryImpl  : Use this service-point for a PingDirectory implementation
        -->
        <create-instance class="org.sourceid.oauth20.token.AccessGrantManagerJdbcImpl"/>
    </service-point>

    <!-- Service/adapter for creating pseudonym name ids -->
    <service-point id="PseudonymService" interface="org.sourceid.saml20.service.PseudonymService">
        <create-instance class="org.sourceid.saml20.service.impl.PseudonymServiceSha1Impl" model="primitive"/>
    </service-point>

    <!-- Service/adapter for creating pairwise pseudonymous identifiers -->
    <service-point id="PairwisePseudonymService" interface="org.sourceid.openid.connect.service.PairwisePseudonymService">
        <create-instance class="org.sourceid.openid.connect.service.impl.PairwisePseudonymServiceAESImpl" model="primitive"/>
    </service-point>

    <!-- URL matching service for target apps/adapter selection -->
    <service-point id="UrlMatchingService" interface="org.sourceid.saml20.profiles.sp.UrlMatchingService">
        <invoke-factory>
            <construct class="org.sourceid.saml20.profiles.sp.UrlMatchingServiceOneStarImpl"/>
        </invoke-factory>
    </service-point>

    <!-- a service to do certificate revocation checking - change to RevocationCheckerNullImpl to turn off -->
    <service-point id="RevocationChecker" interface="com.pingidentity.crypto.RevocationChecker">
        <invoke-factory>
            <construct class="com.pingidentity.crypto.RevocationCheckerImpl"/>
            <!--<construct class="com.pingidentity.crypto.RevocationCheckerNullImpl"/>-->
        </invoke-factory>
    </service-point>

    <service-point id="Halter" interface="org.sourceid.saml20.util.SystemUtil$Halter">
        <create-instance class="org.sourceid.saml20.util.SystemUtil$RealHalter"/>
    </service-point>

    <!-- Locale override service -->
    <service-point id="LocaleOverrideService" interface="com.pingidentity.sdk.locale.LocaleOverrideService">
        <invoke-factory>
            <construct class="com.pingidentity.locale.LocaleOverrideServiceImpl"/>
        </invoke-factory>
    </service-point>

    <!-- Service for using custom OAuth client storage implementation. -->
    <service-point id="ClientStorageManager" interface="com.pingidentity.sdk.oauth20.ClientStorageManagerV2">
        <invoke-factory>
            <!--
                Provide the class name for the custom OAuth client storage implementation.
            -->
            <construct class="org.sourceid.oauth20.domain.NoOpClientStorageManager"/>
        </invoke-factory>
    </service-point>

    <!-- Service for storing OAuth client configuration. -->
    <service-point id="ClientManager" interface="org.sourceid.oauth20.domain.ClientManager">
        <invoke-factory>
            <!--
                Supported classes are
                        org.sourceid.oauth20.domain.ClientManagerXmlFileImpl            : Use this service-point for a XML implementation.
                        org.sourceid.oauth20.domain.ClientManagerJdbcImpl               : Use this service-point for a Jdbc implementation.
                        org.sourceid.oauth20.domain.ClientManagerLdapImpl               : Use this service-point for a LDAP implementation.
                        org.sourceid.oauth20.domain.ClientManagerGenericImpl            : Use this service-point if you have specified a custom ClientStorageManager implementation above.
            -->
            <construct class="org.sourceid.oauth20.domain.ClientManagerXmlFileImpl"/>
        </invoke-factory>
    </service-point>

    <!-- Service for storing Authentication Sessions. -->
    <service-point id="SessionStorageManager" interface="org.sourceid.saml20.service.session.data.SessionStorageManager">
        <invoke-factory>
            <!--
                Supported classes are
                        org.sourceid.saml20.service.session.data.impl.SessionStorageManagerJdbcImpl : Use this service-point for a Jdbc implementation.
                        org.sourceid.saml20.service.session.data.impl.SessionStorageManagerLdapImpl : Use this service-point for a LDAP implementation.
            -->
            <construct class="org.sourceid.saml20.service.session.data.impl.SessionStorageManagerJdbcImpl"/>
        </invoke-factory>
    </service-point>

    <!--
        Service for encrypting/decrypting PingFederate's master key file (pf.jwk). The default
        implementation does no operation and hence the keys are stored in plain text. Any custom
        implementation can be created and referred to here. Ping Federate 9.3 added support for
        master key encryption using AWS Key Management Services. See the PingFederate SDK's
        com.pingidentity.sdk.key.MasterKeyEncryptor interface for more info.

        Supported classes are
            com.pingidentity.crypto.jwk.NoOpMasterKeyEncryptor                    : The default implementation that does no operation.
            com.pingidentity.pingcommons.aws.key.AwsKmsMasterKeyEncryptor         : AWS KMS implementation. Note that admin should specify the key Id in MasterKeySet.xml.
     -->
    <service-point id="MasterKeyEncryptor" interface="com.pingidentity.sdk.key.MasterKeyEncryptor">
        <create-instance class="com.pingidentity.gsa.devops.keymanagement.VaultMasterKeyEncryptor"/>
    </service-point>
</module>
